[
	{
		"moduleName": "loader.js",
		"description": "The first module loaded when using Red Locomotive. Contains The RedLocomotive constructor. Unlike the other modules it is included into the page with a script tag.",
		"methods": [
			{
				"name": "RedLocomotive",
				"description": "The Red Locomotive constructor. This function creates an instance then passes it to a callback. Its also used to load modules.",
				"isGlobal": true,
				"arguments": [
					{
						"name": "engineConfig",
						"type": ["object", "string"],
						"description": "Accepts an object containing configuration for initializing Red Locomotive. Accepts a module name when using 'RedLocomotive()' for defining a module."
					},
					{
						"name": "callback",
						"type": "object",
						"description": "Accepts a callback. Accepts a callback passing it a Red Locomotive instance. When defining a module it also passes a second parameter containing the configuration object passed to 'RedLocomotive()' on initialization."
					}
				]
			},
			{
				"name": "require",
				"description": "Used to load modules into the current RedLocomotive engine. Modules are stored and loaded from a folder named modules adjacent to the red-locomotive folder. This is suitable for hot loading modules. If you wish to load a module on startup with RedLocomotive you don't need to use this function. You can accomplish this with 'RedLocomotive({ \"require\": \"[moduleNameOne, moduleNameTwo...]\" },function(){ //your code });'",
				"arguments": [
					{
						"name": "moduleName",
						"type": ["string", "object"],
						"description": "The name of a module or an array of module names."
					},
					{
						"name": "callback",
						"type": "function",
						"description": "A callback to run after the module has been integrated into the engine."
					}
				]
			},
			{
				"name": "loadScript",
				"description": "downloads and executes a JavaScript file.",
				"arguments": [
					{
						"name": "url",
						"type": "string",
						"description": "A url to a JavaScript file."
					},
					{
						"name": "callback",
						"type": "function",
						"description": "A callback to run after the module has been integrated into the engine."
					}
				]
			}
		]
	},
	{
		"moduleName": "core.js",
		"description": "Contains the majority of all base functions Red Locomotive is built on. Contains basic timing, positioning, and math related functions. The core module API is not frozen.",
		"methods": [
			{
				"name": "callCounter",
				"description": "Allows funneling of callbacks. Accepts a callback and The number of executions before executing the callback. Returns a clock function that can be passed to a group of functions. Once the returned function has been executed the given number of times, the callback passed to the call counter will be executed.",
				"arguments": [
					{   "name": "iterations",
						"type": ["number"],
						"description": "The number of times the clock must be executed to trigger the callback."
					},
					{   "name": "callback",
						"type": ["function"],
						"description": "The callback that fires after the clock has been executed the maximum number of times."
					}
				],
				"returns": {
					"name": "clock",
					"type": "function",
					"description": "A clock function that can be passed a number of times as a callback."
				}
			},
			{
				"name": "distance",
				"description": "Calculates the distance a pair of coordinates are from 0.",
				"arguments": [
					{   "name": "x",
						"type": ["number"],
						"description": "The X coordinate."
					},
					{   "name": "y",
						"type": ["number"],
						"description": "The Y coordinate."
					}
				],
				"returns": {
					"name": "distance",
					"type": "number",
					"description": "The distance between the X and Y coordinates, and 0."
				}
			},
			{
				"name": "degree",
				"description": "Calculates the degree or angle a pair of coordinates are from 0. Moving straight up is 0 degrees.",
				"arguments": [
					{   "name": "x",
						"type": ["number"],
						"description": "The X coordinate."
					},
					{   "name": "y",
						"type": ["number"],
						"description": "The Y coordinate."
					}
				],
				"returns": {
					"name": "degree",
					"type": "number",
					"description": "The degree or angle the X and Y coordinates are from 0."
				}
			},
			{
				"name": "vector",
				"description": "Calculates the degree or angle and the distance a pair of coordinates are from 0. Moving straight up is 0 degrees.",
				"arguments": [
					{   "name": "x",
						"type": ["number"],
						"description": "The X coordinate."
					},
					{   "name": "y",
						"type": ["number"],
						"description": "The Y coordinate."
					}
				],
				"returns": {
					"name": "vectorArray",
					"type": "object",
					"description": "An array containing the distance and the degree or angle the X and Y coordinates are from 0."
				}
			},
			{
				"name": "coords",
				"description": "Calculates coordinates from degree or angle and a distance are from 0. Moving straight up is 0 degrees.",
				"arguments": [
					{   "name": "degree",
						"type": ["number"],
						"description": "The degree from 0. Moving straight up is 0 degrees."
					},
					{   "name": "distance",
						"type": ["number"],
						"description": "The distance from 0."
					}
				],
				"returns": {
					"name": "coordinatesArray",
					"type": "object",
					"description": "An array containing an X and Y coordinate from 0."
				}
			},
			{
				"name": "every",
				"description": "Executes a callback on a set number of frame draws continuously. Useful for any time based logic.",
				"arguments": [
					{
						"name": "callback",
						"type": "function",
						"description": "A callback to be executed on a set number of frame draws."
					},
					{
						"name": "interval",
						"type": "number",
						"description": "The number of frames to wait before each callback execution.",
						"default": "0"
					}
				]
			},
			{
				"name": "after",
				"description": "Executes a callback on a set number of frame draws a single time. Useful for any time based logic.",
				"arguments": [
					{
						"name": "callback",
						"type": "function",
						"description": "A callback to be executed in a set number of frame draws."
					},
					{
						"name": "interval",
						"type": "number",
						"description": "The number of frames to wait before executing the callback.",
						"default": "0"
					}
				]
			},
			{
				"name": "event",
				"description": "Executes any action callbacks binded to a name with '.when()'.",
				"arguments": [
					{
						"name": "eventName",
						"type": "string",
						"description": "The name used to bind to the event."
					},
					{
						"name": "...args",
						"type": ["string", "boolean", "object", "number", "function"],
						"description": "Anything other arguments you wish to pass to the binded action callbacks.",
						"default": "0"
					}
				]
			},
			{
				"name": "when",
				"description": "Binds a callback to an event name. The callback will be executed when the event is executed with 'event()'.",
				"arguments": [
					{
						"name": "eventName",
						"type": "string",
						"description": "The name used to bind to the event."
					},
					{
						"name": "callback",
						"type": "function",
						"description": "A callback to be executed with 'event()' using the same event name."
					}
				]
			},
			{
				"name": "random",
				"description": "Gives a random number between 0 and a given number.",
				"arguments": [
					{
						"name": "limit",
						"type": "number",
						"description": "The maximum value the returned number may have."
					}
				],
				"returns": {
					"name": "number",
					"type": "number"
				}
			},
			{
				"name": "idGen",
				"description": "Returns a unique number.",
				"returns": {
					"name": "id",
					"type": "number"
				}
			},
			{
				"name": "tan",
				"description": "Used for calculating tangent from a degree quickly. This function will cache all results.",
				"arguments": [
					{   "name": "degree",
						"type": ["number"]
					}
				],
				"returns": {
					"name": "decimal",
					"type": "number"
				}
			},
			{
				"name": "sin",
				"description": "Used for calculating sine from a degree quickly. This function will cache all results.",
				"arguments": [
					{   "name": "degree",
						"type": ["number"]
					}
				],
				"returns": {
					"name": "decimal",
					"type": "number"
				}
			},
			{
				"name": "cos",
				"description": "Used for calculating cosine from a degree quickly. This function will cache all results.",
				"arguments": [
					{   "name": "degree",
						"type": ["number"]
					}
				],
				"returns": {
					"name": "decimal",
					"type": "number"
				}
			},
			{
				"name": "atan",
				"description": "Used for calculating arc tan from a decimal quickly. This function will cache all results.",
				"arguments": [
					{   "name": "decimal",
						"type": ["number"]
					}
				],
				"returns": {
					"name": "degree",
					"type": "number"
				}
			},
			{
				"name": "asin",
				"description": "Used for calculating arc sine from a decimal quickly. This function will cache all results.",
				"arguments": [
					{   "name": "decimal",
						"type": ["number"]
					}
				],
				"returns": {
					"name": "degree",
					"type": "number"
				}
			},
			{
				"name": "acos",
				"description": "Used for calculating arc cosine from a decimal quickly. This function will cache all results.",
				"arguments": [
					{   "name": "decimal",
						"type": ["number"]
					}
				],
				"returns": {
					"name": "degree",
					"type": "number"
				}
			}
		]
	},
	{
		"moduleName": "sprites.js",
		"description": "Contains all methods for loading sprite sheets into memory.",
		"objects": [
			{
				"name": "spriteSheet",
				"methods": [
					{
						"name": "create",
						"description": "Downloads a spriteSheet in PNG format and prepares it to be applied to elements.",
						"arguments": [
							{
								"name": "name",
								"description": "The desired name of the sprite sheet. Or an array containing sub arrays representing each individual sprite sheet. These sub arrays should contain the same arguments listed here.",
								"type": ["string", "object"]
							},
							{
								"name": "url",
								"description": "The url to the PNG spriteSheet. If name is an array of sprite sheets then this becomes the callback argument.",
								"type": ["string", "function"]
							},
							{
								"name": "spriteWidth",
								"description": "The cell width of each sprite in the sprite sheet. The sprites sheet is divided in to equal parts of the specified width. Not used if 'name' is an array of sprite sheets.",
								"type": "int",
								"default": "none"
							},
							{
								"name": "spriteHeight",
								"description": "The cell width of each sprite in the sprite sheet. The sprites sheet is divided in to equal parts of the specified height. Not used if 'name' is an array of sprite sheets.",
								"type": "int",
								"default": "none"
							},
							{
								"name": "callback",
								"description": "Fired when the sprite sheet has been downloaded and is ready for use. If 'name' is an array of sprite sheets the 'url' argument acts as the callback instead.",
								"type": "function",
								"default": "none"
							}
						]
					},
					{
						"name": "get",
						"description": "Retrieves a sprite sheet by its assigned name.",
						"arguments": [
							{
								"name": "name",
								"description": "The name of the sprite sheet.",
								"type": "string"
							}
						],
						"returns": {
							"name": "spriteSheetObject",
							"description": "The sprite sheet object containing all of the sprites."
						}
					},
					{
						"name": "remove",
						"description": "Removes a sprite sheet from memory by name.",
						"arguments": [
							{
								"name": "name",
								"description": "The name of the sprite sheet.",
								"type": "string"
							}
						]
					}
				]
			}
		]
	},
	{
		"moduleName": "elements.js",
		"description": "Contains methods useful for manipulating elements. The Element module API is not frozen.",
		"objects": [
			{
				"name": "element",
				"methods": [
					{
						"name": "create",
						"description": "Creates a element that will be drawn to all viewports every frame.",
						"returns": {
							"name": "character",
							"type": "object",
							"description": "A character element object that can be directly modified."
						},
						"arguments": [
							{
								"name": "elementName",
								"description": "The desired name of the returned element.",
								"type": "string"
							},
							{
								"name": "spriteSheetName",
								"description": "The sprite sheet object, or name of the sprite sheet the element will use.",
								"default": "none",
								"type": ["string", "object"]
							},
							{
								"name": "x",
								"description": "The X position of the element relative to the world origin.",
								"default": 0,
								"type": "number"
							},
							{
								"name": "y",
								"description": "The Y position of the element relative to the world origin.",
								"default": 0,
								"type": "number"
							},
							{
								"name": "z",
								"description": "The Z height of the element. Controls the order elements are drawn in. Elements with a higher Z height are draw on top of elements with lower Z heights.",
								"default": 0,
								"type": "number"
							},
							{
								"name": "spriteColumn",
								"description": "The column of the desired sprite in the sprite sheet assigned in 'spriteSheetName'.",
								"default": 0,
								"type": "number"
							},
							{
								"name": "spriteRow",
								"description": "The row of the desired sprite in the sprite sheet assigned in 'spriteSheetName'.",
								"default": 0,
								"type": "number"
							},
							{
								"name": "collisionMaskColumn",
								"description": "The column of the desired collision mask sprite in the sprite sheet assigned in 'spriteSheetName'.",
								"default": 0,
								"type": "number"
							},
							{
								"name": "collisionMaskRow",
								"description": "The row of the desired collision mask sprite in the sprite sheet assigned in 'spriteSheetName'.",
								"default": 0,
								"type": "number"
							}
						]
					},
					{
						"name": "get",
						"description": "Retrieves an element based on its name. Returns all elements when the first argument is 'all'.",
						"arguments": [
							{
								"name": "elementName",
								"type": "string",
								"description": "The name of the element you wish to retrieve. Set 'all' to get all of the elements in the system."
							}
						]
					},
					{
						"name": "remove",
						"description": "Removes an element based on its name or by passing the element directly. Removes all elements when the first argument is 'all'.",
						"arguments": [
							{
								"name": "elementName",
								"type": ["string", "object"],
								"description": "The name of the element or the actual element you wish to remove. Setting to 'all' removes all the elements in the system."
							}
						]
					},
					{
						"name": "keepIn",
						"description": "Keeps an element in a viewport by scrolling the viewport to the element. A margin can be set to adjust how close the element can get to the edge of the viewport before scrolling.",
						"arguments": [
							{
								"name": "element",
								"type": "object",
								"description": "Element object."
							},
							{
								"name": "viewport",
								"type": "object",
								"description": "Viewport object."
							},
							{
								"name": "marginX",
								"type": "number",
								"description": "The scroll margin for the left and right side of the viewport."
							},
							{
								"name": "marginY",
								"type": "number",
								"description": "The scroll margin for the top and bottom of the viewport."
							}
						]
					}
				]
			}
		]
	},
	{
		"moduleName": "viewports.js",
		"description": "Contains all methods for manipulating and creating viewports.",
		"objects": [
			{
				"name": "viewport",
				"methods": [
					{
						"name": "create",
						"description": "Creates a viewport and embeds in into a selected node on the page.",
						"arguments": [
							{
								"name": "name",
								"description": "The desired name of the viewport.",
								"type": "string"
							},
							{
								"name": "containerSelector",
								"description": "A jQuery (sizzle) selector used to select the container that the viewport will be embedded into.",
								"type": "string"
							},
							{
								"name": "width",
								"description": "The width of the viewport's resolution and width of the viewport node in the page. CSS can override the width of the viewport node.",
								"type": "int"
							},
							{
								"name": "height",
								"description": "The height of the viewport's resolution and height of the viewport node in the page. CSS can override the height of the viewport node.",
								"type": "int"
							},
							{
								"name": "x",
								"description": "The x position of the viewport inside the game environment.",
								"type": "int",
								"default": "0"
							},
							{
								"name": "y",
								"description": "The y position of the viewport inside the game environment.",
								"type": "int",
								"default": "0"
							},
							{
								"name": "fillStyle",
								"description": "A CSS background value for the viewport. Useful for setting a background color.",
								"type": "string",
								"default": "none"
							}
						]
					},
					{
						"name": "get",
						"description": "Returns a viewport object by name.",
						"arguments": [
							{
								"name": "name",
								"description": "The assigned name of the viewport.",
								"type": "string"
							}
						]
					},
					{
						"name": "remove",
						"description": "Removes a viewport from the draw cycle and from the page by name.",
						"arguments": [
							{
								"name": "name",
								"description": "The assigned name of the viewport.",
								"type": "string"
							}
						]
					},
					{
						"name": "containsPoint",
						"description": "Returns true or false depending on if a pair of given x and y coordinates are within a given viewport.",
						"arguments": [
							{
								"name": "viewport",
								"description": "The viewport to check against.",
								"type": "object"
							},
							{
								"name": "x",
								"description": "The x coordinate.",
								"type": "int"
							},
							{
								"name": "y",
								"description": "The y coordinate.",
								"type": "int"
							}
						],
						"returns": {
							"name": "PointContainedBool",
							"description": "Is true if the coordinates are contained in the viewport, false if they are not.",
							"type": "boolean"
						}
					}
				]
			}
		]
	},
	{
		"moduleName": "controls.js",
		"description": "Provides a host of methods for binding to the keyboard and the mouse. These are not just simple binds, the controls module allows to binding very complex key combinations with no limits other than those presented by the browser. With the mouse you have the ablity to bind to any viewport at any scale on any element.",
		"methods": [
			{
				"name": "getActiveKeys",
				"returns": {
					"name": "ActiveKeysArray",
					"description": "An array containing all pressed keys.",
					"type": "object"
				},
				"arguments": []
			}
		],
		"objects": [
			{
				"name": "bind",
				"description": "Contains all methods relating to binding the keyboard and the mouse.",
				"methods": [
					{
						"name": "key",
						"description": "Used to bind to a single key, a group of keys, a combination of keys, or a group of a combination of keys. Fires a callback when a key pressed or a combo is executed, and another when released.",
						"arguments": [
							{
								"name": "combo",
								"description": "The key (the actual form the key represents) or combo to bind too. When binding to a combo separate the keys with the pluses. Accepts multiple keys or combos separated by commas.",
								"type": "string"
							},
							{
								"name": "firstCallback",
								"description": "Fires after the key(s) is pressed, or the combo(s) is executed.",
								"type": "function"
							},
							{
								"name": "secondCallback",
								"description": "Fires after the key(s) is pressed, or the combo(s) is released.",
								"type": "function",
								"default": "none"
							}
						]
					},
					{
						"name": "axis",
						"description": "Useful for creating directional controls. Allows binding to four keys and/or key combinations.",
						"arguments": [
							{
								"name": "upCombo",
								"description": "A key or combo to bind upward movement too. When binding to a combo separate the keys with the pluses. Accepts multiple keys or combos separated by commas.",
								"type": "string"
							},
							{
								"name": "downCombo",
								"description": "A key or combo to bind downward movement too. When binding to a combo separate the keys with the pluses. Accepts multiple keys or combos separated by commas.",
								"type": "string"
							},
							{
								"name": "leftCombo",
								"description": "A key or combo to bind leftward movement too. When binding to a combo separate the keys with the pluses. Accepts multiple keys or combos separated by commas.",
								"type": "string"
							},
							{
								"name": "rightCombo",
								"description": "A key or combo to bind rightward movement too. When binding to a combo separate the keys with the pluses. Accepts multiple keys or combos separated by commas.",
								"type": "string"
							},
							{
								"name": "callback",
								"description": "Fires when one or more of the four key bindings are executed. This callback is passed the degree of movement via its first argument.",
								"type": "function"
							}
						]
					},
					{
						"name": "click",
						"description": "Binds a callback or set of callbacks to a click event from any mouse button on a given element's bounding box in a given viewport.",
						"arguments": [
							{
								"name": "element",
								"type": "object",
								"description": "Element object."
							},
							{
								"name": "viewport",
								"type": "object",
								"description": "Viewport object."
							},
							{
								"name": "firstCallback",
								"description": "Fires after a mouse button is pressed over the given element's bounding box in the given viewport. Callback is passed the event object. Set to false if you only wish to bind to the 'mouseup' event.",
								"type": ["function", "false"]
							},
							{
								"name": "secondCallback",
								"description": "Fires after a mouse button is released over the given element's bounding box in the given viewport. Callback is passed the event object.",
								"type": "function",
								"default": "none"
							}
						]
					},
					{
						"name": "leftClick",
						"description": "Binds a callback or set of callbacks to a click event from the left button on a given element's bounding box in a given viewport.",
						"arguments": [
							{
								"name": "element",
								"type": "object",
								"description": "Element object."
							},
							{
								"name": "viewport",
								"type": "object",
								"description": "Viewport object."
							},
							{
								"name": "firstCallback",
								"description": "Fires after the left mouse button is pressed over the given element's bounding box in the given viewport. Callback is passed the event object. Set to false if you only wish to bind to the 'mouseup' event.",
								"type": ["function", "false"]
							},
							{
								"name": "secondCallback",
								"description": "Fires after the left mouse button is released over the given element's bounding box in the given viewport. Callback is passed the event object.",
								"type": "function",
								"default": "none"
							}
						]
					},
					{
						"name": "middleClick",
						"description": "Binds a callback or set of callbacks to a click event from the middle button on a given element's bounding box in a given viewport.",
						"arguments": [
							{
								"name": "element",
								"type": "object",
								"description": "Element object."
							},
							{
								"name": "viewport",
								"type": "object",
								"description": "Viewport object."
							},
							{
								"name": "firstCallback",
								"description": "Fires after the middle mouse button is pressed over the given element's bounding box in the given viewport. Callback is passed the event object. Set to false if you only wish to bind to the 'mouseup' event.",
								"type": ["function", "false"]
							},
							{
								"name": "secondCallback",
								"description": "Fires after the middle mouse button is released over the given element's bounding box in the given viewport. Callback is passed the event object.",
								"type": "function",
								"default": "none"
							}
						]
					},
					{
						"name": "rightClick",
						"description": "Binds a callback or set of callbacks to a click event from the right mouse button on a given element's bounding box in a given viewport.",
						"arguments": [
							{
								"name": "element",
								"type": "object",
								"description": "Element object."
							},
							{
								"name": "viewport",
								"type": "object",
								"description": "Viewport object."
							},
							{
								"name": "firstCallback",
								"description": "Fires after the right mouse button is pressed over the given element's bounding box in the given viewport. Callback is passed the event object. Set to false if you only wish to bind to the 'mouseup' event.",
								"type": ["function", "false"]
							},
							{
								"name": "secondCallback",
								"description": "Fires after the right mouse button is released over the given element's bounding box in the given viewport. Callback is passed the event object.",
								"type": "function",
								"default": "none"
							}
						]
					}
				],
				"objects": [
					{
						"name": "alpha",
						"description": "Contains methods for binding click events to elements based on the alpha value of the pixel below the cursor.",
						"methods": [
							{
								"name": "click",
								"description": "Binds a callback or set of callbacks to a click event from any mouse button on a given element's collision mask in a given viewport.",
								"arguments": [
									{
										"name": "element",
										"type": "object",
										"description": "Element object."
									},
									{
										"name": "viewport",
										"type": "object",
										"description": "Viewport object."
									},
									{
										"name": "alpha",
										"type": "int",
										"description": "The minimum required alpha value (1 - 255) of the pixel under the cursor from the element's collision mask."
									},
									{
										"name": "firstCallback",
										"description": "Fires after a mouse button is pressed over the given element's collision mask in the given viewport. Callback is passed the event object. Set to false if you only wish to bind to the 'mouseup' event.",
										"type": ["function", "false"]
									},
									{
										"name": "secondCallback",
										"description": "Fires after a mouse button is released over the given element's collision mask in the given viewport. Callback is passed the event object.",
										"type": "function",
										"default": "none"
									}
								]
							},
							{
								"name": "leftClick",
								"description": "Binds a callback or set of callbacks to a click event from the left button on a given element's collision mask in a given viewport.",
								"arguments": [
									{
										"name": "element",
										"type": "object",
										"description": "Element object."
									},
									{
										"name": "viewport",
										"type": "object",
										"description": "Viewport object."
									},
									{
										"name": "alpha",
										"type": "int",
										"description": "The minimum required alpha value (1 - 255) of the pixel under the cursor from the element's collision mask."
									},
									{
										"name": "firstCallback",
										"description": "Fires after the left mouse button is pressed over the given element's collision mask in the given viewport. Callback is passed the event object. Set to false if you only wish to bind to the 'mouseup' event.",
										"type": ["function", "false"]
									},
									{
										"name": "secondCallback",
										"description": "Fires after the left mouse button is released over the given element's collision mask in the given viewport. Callback is passed the event object.",
										"type": "function",
										"default": "none"
									}
								]
							},
							{
								"name": "middleClick",
								"description": "Binds a callback or set of callbacks to a click event from the middle button on a given element's collision mask in a given viewport.",
								"arguments": [
									{
										"name": "element",
										"type": "object",
										"description": "Element object."
									},
									{
										"name": "viewport",
										"type": "object",
										"description": "Viewport object."
									},
									{
										"name": "alpha",
										"type": "int",
										"description": "The minimum required alpha value (1 - 255) of the pixel under the cursor from the element's collision mask."
									},
									{
										"name": "firstCallback",
										"description": "Fires after the middle mouse button is pressed over the given element's collision mask in the given viewport. Callback is passed the event object. Set to false if you only wish to bind to the 'mouseup' event.",
										"type": ["function", "false"]
									},
									{
										"name": "secondCallback",
										"description": "Fires after the middle mouse button is released over the given element's collision mask in the given viewport. Callback is passed the event object.",
										"type": "function",
										"default": "none"
									}
								]
							},
							{
								"name": "rightClick",
								"description": "Binds a callback or set of callbacks to a click event from the right mouse button on a given element's collision mask in a given viewport.",
								"arguments": [
									{
										"name": "element",
										"type": "object",
										"description": "Element object."
									},
									{
										"name": "viewport",
										"type": "object",
										"description": "Viewport object."
									},
									{
										"name": "alpha",
										"type": "int",
										"description": "The minimum required alpha value (1 - 255) of the pixel under the cursor from the element's collision mask."
									},
									{
										"name": "firstCallback",
										"description": "Fires after the right mouse button is pressed over the given element's collision mask in the given viewport. Callback is passed the event object. Set to false if you only wish to bind to the 'mouseup' event.",
										"type": ["function", "false"]
									},
									{
										"name": "secondCallback",
										"description": "Fires after the right mouse button is released over the given element's collision mask in the given viewport. Callback is passed the event object.",
										"type": "function",
										"default": "none"
									}
								]
							}
						]
					}
				]
			},
			{
				"name": "unbind",
				"description": "THIS OBJECT IS INCOMPLETE! It is missing several methods. Contains methods for unbinding key combinations and mouse bindings.",
				"methods": [
					{
						"name": "key",
						"description": "Clears all bindings created by '.bind.key()' that use a provided key.",
						"arguments": [
							{
								"name": "key",
								"description": "The name of the key to be unbound.",
								"type": "string"
							}
						]
					}
				]
			}
		]
	},
	{
		"moduleName": "bitmaps.js",
		"description": "Supplies a number of functions for working with image data. Using this module is highly recommended whenever you are working with image data. This module is used extensively by RedLocomotive's internal systems.",
		"objects": [
			{
				"name": "bitmap",
				"description": "wraps bitmap related functions.",
				"methods": [
					{
						"name": "create",
						"description": "Creates a new bitmap object. This function return an empty unmodified canvas if no arguments are set. The object contains a canvas and its context.",
						"arguments": [
							{
								"name": "width",
								"description": "The width of the bitmap.",
								"type": "number",
								"default": 0
							},
							{
								"name": "height",
								"description": "The height of the bitmap.",
								"type": "number",
								"default": 0
							},
							{
								"name": "image",
								"description": "The source of the bitmap. Can be an image object or a canvas.",
								"type": "number",
								"default": "false"
							},
							{
								"name": "sX",
								"description": "The x coordinate to pull from in source image object or canvas.",
								"type": "number",
								"default": "false"
							},
							{
								"name": "sY",
								"description": "The y coordinate to pull from in source image object or canvas.",
								"type": "number",
								"default": "false"
							},
							{
								"name": "sW",
								"description": "The width of the area to pull from in source image object or canvas.",
								"type": "number",
								"default": "false"
							},
							{
								"name": "sH",
								"description": "The height of the area to pull from in source image object or canvas.",
								"type": "number",
								"default": "false"
							},
							{
								"name": "dX",
								"description": "The x coordinate to apply the source data to within the new bitmap.",
								"type": "number",
								"default": "false"
							},
							{
								"name": "dY",
								"description": "The y coordinate to apply the source data to within the new bitmap.",
								"type": "number",
								"default": "false"
							},
							{
								"name": "dW",
								"description": "The width of the area to apply the source data to within the new bitmap.",
								"type": "number",
								"default": "false"
							},
							{
								"name": "dH",
								"description": "The height of the area to apply the source data to within the new bitmap.",
								"type": "number",
								"default": "false"
							}
						],
						"returns": {
							"name": "bitmap",
							"type": "object",
							"description": "Bitmap object."
						}
					},
					{
						"name": "trim",
						"description": "Trims off excess transparent pixels around an image. This is useful for removing excessive transparency and reducing the size of a bitmap.",
						"arguments": [
							{
								"name": "bitmap",
								"type": "object",
								"description": "A bitmap object created with '.bitmap.create()'."
							}
						],
						"returns": {
							"name": "bitmap",
							"type": "object",
							"description": "Bitmap object."
						}
					},
					{
						"name": "slice",
						"description": "Cuts a bitmap up into an array equal sized smaller bitmaps. This is useful for turning sprite sheets into an array of sprites.",
						"arguments": [
							{
								"name": "bitmap",
								"type": "object",
								"description": "A bitmap object created with '.bitmap.create()'."
							}
						],
						"returns": {
							"name": "bitmapArray",
							"type": "object",
							"description": "An array of bitmap objects."
						}
					},
					{
						"name": "dump",
						"description": "Dumps an array of pixel data from a bitmap. Unlike canvas's 'getImageData()' function, 'dump()' wraps a pixel's red blue green and alpha data in its own array, then it inserts all of the pixel data into a single array.",
						"arguments": [
							{
								"name": "bitmap",
								"type": "object",
								"description": "A bitmap object created with '.bitmap.create()'."
							}
						],
						"returns": {
							"name": "PixelArray",
							"type": "object",
							"description": "An array of pixel arrays."
						}
					},
					{
						"name": "isBlank",
						"description": "Checks to see if a bitmap is empty. If the bitmap is this empty this function returns true, Otherwise it returns false.",
						"arguments": [
							{
								"name": "bitmap",
								"type": "object",
								"description": "A bitmap object created with '.bitmap.create()'."
							}
						],
						"returns": {
							"name": "isEmpty",
							"type": "boolean",
							"description": "If the bitmap is this empty true, Otherwise false."
						}
					},
					{
						"name": "getPointData",
						"description": "Gets the red, blue, green, and alpha data from a specific point in a bitmap.",
						"arguments": [
							{
								"name": "bitmap",
								"type": "object",
								"description": "A bitmap object created with '.bitmap.create()'."
							},
							{
								"name": "x",
								"type": "number",
								"description": "The x coordinate to pull from."
							},
							{
								"name": "y",
								"type": "number",
								"description": "The y coordinate to pull from."
							}
						],
						"returns": {
							"name": "pixelArray",
							"type": "object",
							"description": "An array containing the red, blue, green, and alpha data."
						}
					}
				]
			}
		]
	}
]